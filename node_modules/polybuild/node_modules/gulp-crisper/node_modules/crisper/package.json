{
  "name": "crisper",
  "version": "1.1.0",
  "description": "Make an HTML file with inline scripts CSP compliant",
  "main": "index.js",
  "bin": {
    "crisper": "bin/crisper"
  },
  "scripts": {
    "test": "node_modules/.bin/jshint --verbose bin/crisper index.js test/test.js && node_modules/.bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/PolymerLabs/crisper.git"
  },
  "author": {
    "name": "The Polymer Authors"
  },
  "license": {
    "type": "BSD-3-Clause",
    "url": "http://polymer.github.io/LICENSE.txt"
  },
  "bugs": {
    "url": "https://github.com/PolymerLabs/crisper/issues"
  },
  "homepage": "https://github.com/PolymerLabs/crisper",
  "dependencies": {
    "dom5": "^1.0.1",
    "nopt": "^3.0.1"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "jshint": "^2.6.3",
    "mocha": "^2.2.3"
  },
  "readme": "# Crisper\n> Split inline scripts from an HTML file for CSP compliance\n\n## Usage\n\nCommand line usage:\n\n    cat index.html | crisper -h build.html -j build.js\n    crisper --source index.html --html build.html --js build.js\n\nOptional Flags:\n\n  - `--script-in-head`: in the output HTML file, place the script in `<head>`\n      with the `defer` attribute to provide better loading performance.\n      Note: this will not work correctly if your script contains\n      `document.write` calls.\n  - `--only-split`: Do not write include a `<script>` tag in the output HTML\n      file\n\nLibrary usage:\n\n    var output = crisp({\n      source: 'source HTML string',\n      jsFileName: 'output js file name.js',\n      scriptInHead: Boolean, //default false\n      onlySplit: Boolean // default false\n    });\n    fs.writeFile(htmlOutputFileName, output.html, 'utf-8', ...);\n    fs.writeFile(jsOutputFileName, output.js, 'utf-8', ...);\n\nDeprecated API:\n\n    var output = crisp.split('source HTML string', 'output js filename.js');\n\n## Usage with Vulcanize\n\nWhen using [vulcanize](https://github.com/Polymer/vulcanize), crisper can handle\nthe html string output directly and write the CSP seperated files on the command\nline\n\n    vulcanize index.html --inline-script | crisper --html build.html --js\n    build.js\n\nOr programmatically\n\n    vulcanize.process('index.html', function(err, html) {\n      if (err) {\n        return cb(err);\n      } else {\n        var out = crisper({\n          source: html,\n          jsFileName: 'name of js file.js',\n          scriptInHead: Boolean, // default false\n          onlySplit: Boolean // default false\n        })\n        cb(null, out.html, out.js);\n      }\n    });\n\n## Build Tools\n\n- [gulp-crisper](https://npmjs.com/package/gulp-crisper)\n- *No grunt plugin yet, will you write it?*\n- *No broccoli plugin yet, will you write it?*\n",
  "readmeFilename": "README.md",
  "_id": "crisper@1.1.0",
  "_from": "crisper@^1.0.3"
}
